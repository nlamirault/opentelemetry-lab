# Copyright (c) Nicolas Lamirault <nicolas.lamirault@gmail.com>
#
# SPDX-License-Identifier: Apache-2.0

---
receivers:
  tcplog/docker:
    listen_address: "0.0.0.0:2255"
    operators:
      - type: regex_parser
        regex: '^<([0-9]+)>[0-9]+ (?P<timestamp>[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\.[0-9]+)?([zZ]|([\+-])([01]\d|2[0-3]):?([0-5]\d)?)?) (?P<container_id>\S+) (?P<container_name>\S+) [0-9]+ - -( (?P<body>.*))?'
        timestamp:
          parse_from: attributes.timestamp
          layout: '%Y-%m-%dT%H:%M:%S.%LZ'
      - type: move
        from: attributes["body"]
        to: body
      - type: remove
        field: attributes.timestamp
        # please remove names from below if you want to collect logs from them
      - type: filter
        id: signoz_logs_filter
        expr: 'attributes.container_name matches "^signoz|(signoz-(|otel-collector|clickhouse|zookeeper))|(infra-(logspout|otel-agent)-.*)"'
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318
        cors:
          allowed_origins:
            - http://*
  prometheus/collector:
    config:
      global:
        scrape_interval: 60s
      scrape_configs:
      - job_name: otel-collector
        scrape_interval: 30s
        static_configs:
        - targets:
            - 127.0.0.1:8888
          labels:
            job_name: otel-collector

extensions:
  health_check:
    endpoint: 0.0.0.0:13133
    path: "/ready"
  pprof:
    endpoint: 0.0.0.0:1777

processors:
  batch:
    send_batch_size: 8192
    send_batch_max_size: 11000
    timeout: 10s
  memory_limiter:
    check_interval: 2s
    limit_mib: 500
    spike_limit_mib: 128
  attributes:
    actions:
    - key: instance
      action: insert
      value: opentelemetry-lab
  resourcedetection/system:
    detectors: [system]
    system:
      hostname_sources: [dns, os]
  resourcedetection/env:
    detectors: ['env']
    timeout: 2s
    override: false
  resourcedetection/docker:
    detectors: [env, docker]
    timeout: 2s
    override: false

exporters:
  otlphttp/logs:
    endpoint: ${env:OTEL_EXPORTER_OTLP_LOGS_ENDPOINT}
    tls:
      insecure: true
  otlphttp/metrics:
    endpoint: ${env:OTEL_EXPORTER_OTLP_METRICS_ENDPOINT}
    tls:
      insecure: true
  otlphttp/traces:
    endpoint: ${env:OTEL_EXPORTER_OTLP_TRACES_ENDPOINT}
    tls:
      insecure: true

  prometheus:
    endpoint: "0.0.0.0:8889"

  debug/metrics:
    verbosity: detailed
  debug/traces:
    verbosity: detailed
  debug/logs:
    verbosity: detailed

connectors:
  spanmetrics:
    dimensions:
    - name: http.method
    - name: http.status_code
    - name: http.route

service:
  telemetry:
    logs:
      encoding: json
    metrics:
      address: 0.0.0.0:8888
  extensions:
    - health_check
    - pprof
  pipelines:
    logs:
      receivers:
      - otlp
      - tcplog/docker
      processors:
      - memory_limiter
      - batch
      - attributes
      exporters:
      - debug/logs
      - otlphttp/logs
    metrics:
      receivers:
      - otlp
      - prometheus/collector
      processors:
      - memory_limiter
      - resourcedetection/docker
      - resourcedetection/env
      - resourcedetection/system
      - batch
      exporters:
      - debug/metrics
      - otlphttp/metrics
      - prometheus
    traces:
      receivers:
      - otlp
      processors:
      - memory_limiter
      - batch
      exporters:
      - debug/traces
      - otlphttp/traces
    # metrics/spanmetrics:
    #   receivers: [spanmetrics]
    #   exporters: [prometheus]
