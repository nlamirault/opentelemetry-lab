# SPDX-FileCopyrightText: Copyright (C) Nicolas Lamirault <nicolas.lamirault@gmail.com>
# SPDX-License-Identifier: Apache-2.0

---
receivers:
  tcplog/docker:
    listen_address: "0.0.0.0:2255"
    operators:
      - type: regex_parser
        regex: '^<([0-9]+)>[0-9]+ (?P<timestamp>[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\.[0-9]+)?([zZ]|([\+-])([01]\d|2[0-3]):?([0-5]\d)?)?) (?P<container_id>\S+) (?P<container_name>\S+) [0-9]+ - -( (?P<body>.*))?'
        timestamp:
          parse_from: attributes.timestamp
          layout: '%Y-%m-%dT%H:%M:%S.%LZ'
      - type: move
        from: attributes["body"]
        to: body
      - type: remove
        field: attributes.timestamp
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318
  otlp/spanmetrics:
    protocols:
      grpc:
        endpoint: "localhost:12345"
  prometheus/collector:
    config:
      global:
        scrape_interval: 60s
      scrape_configs:
      - job_name: otel-collector
        scrape_interval: 30s
        static_configs:
        - targets:
            - 127.0.0.1:8888
          labels:
            job_name: otel-collector

extensions:
  health_check:
    endpoint: 0.0.0.0:13133
    path: "/ready"
  pprof:
    endpoint: 0.0.0.0:1777
  zpages:
    endpoint: localhost:55679

processors:
  batch:
    send_batch_size: 10000
    send_batch_max_size: 11000
    timeout: 10s
  memory_limiter:
    check_interval: 2s
    limit_mib: 1800
    spike_limit_mib: 500
  attributes:
    actions:
    - key: instance
      action: insert
      value: opentelemetry-lab
  resourcedetection:
    detectors: [env, system]
    timeout: 2s
  signozspanmetrics/prometheus:
    metrics_exporter: prometheus
    latency_histogram_buckets: [100us, 1ms, 2ms, 6ms, 10ms, 50ms, 100ms, 250ms, 500ms, 1000ms, 1400ms, 2000ms, 5s, 10s, 20s, 40s, 60s ]
    dimensions_cache_size: 10000
    dimensions:
      - name: service.namespace
        default: default
      - name: deployment.environment
        default: default

exporters:
  clickhousetraces:
    datasource: ${env:CLICKHOUSE_ENDPOINT}/${env:CLICKHOUSE_TRACE_DATABASE}
    low_cardinal_exception_grouping: ${env:LOW_CARDINAL_EXCEPTION_GROUPING}
    use_new_schema: true
  signozclickhousemetrics:
    dsn: ${env:CLICKHOUSE_ENDPOINT}/${env:CLICKHOUSE_METRIC_DATABASE}
    timeout: 45s
  clickhouselogsexporter:
    dsn: ${env:CLICKHOUSE_ENDPOINT}/${env:CLICKHOUSE_LOG_DATABASE}
    timeout: 10s
    use_new_schema: true
  metadataexporter:
    dsn: ${env:CLICKHOUSE_ENDPOINT}/${env:CLICKHOUSE_META_DATABASE}
    timeout: 10s
    # tenant_id: ${env:TENANT_ID}
    cache:
      provider: in_memory

  prometheus:
    endpoint: "0.0.0.0:8889"

  debug/metrics:
    verbosity: detailed
  debug/traces:
    verbosity: detailed
  debug/logs:
    verbosity: detailed

connectors:
  spanmetrics:
    dimensions:
    - name: http.method
    - name: http.status_code
    - name: http.route

service:
  telemetry:
    logs:
      encoding: json
    # metrics:
    #   address: 0.0.0.0:8888
  extensions:
    - health_check
    - pprof
    - zpages
  pipelines:
    logs:
      receivers:
      - otlp
      - tcplog/docker
      processors:
      - batch
      - attributes
      exporters:
      # - debug/logs
      - clickhouselogsexporter
      - metadataexporter
    metrics:
      receivers:
      - otlp
      - prometheus/collector
      processors:
      - resourcedetection
      - batch
      exporters:
      # - debug/metrics
      - signozclickhousemetrics
      - metadataexporter
    metrics/spanmetrics:
      receivers:
      - otlp/spanmetrics
      exporters:
      - prometheus
    traces:
      receivers:
      - otlp
      processors:
      - signozspanmetrics/prometheus
      - batch
      exporters:
      # - debug/traces
      - clickhousetraces
      - metadataexporter
