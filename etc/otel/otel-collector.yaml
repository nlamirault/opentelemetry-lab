# Copyright (c) Nicolas Lamirault <nicolas.lamirault@gmail.com>
#
# SPDX-License-Identifier: Apache-2.0

---
receivers:
  tcplog/docker:
    listen_address: "0.0.0.0:2255"
    operators:
      - type: regex_parser
        regex: '^<([0-9]+)>[0-9]+ (?P<timestamp>[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}(\.[0-9]+)?([zZ]|([\+-])([01]\d|2[0-3]):?([0-5]\d)?)?) (?P<container_id>\S+) (?P<container_name>\S+) [0-9]+ - -( (?P<body>.*))?'
        timestamp:
          parse_from: attributes.timestamp
          layout: '%Y-%m-%dT%H:%M:%S.%LZ'
      - type: move
        from: attributes["body"]
        to: body
      - type: remove
        field: attributes.timestamp
  otlp:
    protocols:
      grpc:
        endpoint: 0.0.0.0:4317
      http:
        endpoint: 0.0.0.0:4318
  prometheus/collector:
    config:
      scrape_configs:
      - job_name: 'opentelemetry-collector'
        static_configs:
        - targets: ['localhost:8888']

processors:
  batch:
    send_batch_size: 10000
    timeout: 5s
  memory_limiter:
    check_interval: 2s
    limit_mib: 1800
    spike_limit_mib: 500
  attributes:
    actions:
      - key: instance
        action: insert
        value: opentelemetry-lab
  resourcedetection/system:
      detectors: ['system']
      system:
        hostname_sources: ['os']

exporters:
  otlphttp/metrics:
    endpoint: ${OTLP_METRICS_ENDPOINT}
    tls:
      insecure: true

  otlphttp/traces:
    endpoint: ${OTLP_TRACES_ENDPOINT}
    tls:
      insecure: true

  otlphttp/logs:
    endpoint: ${OTLP_LOGS_ENDPOINT}
    tls:
      insecure: true

  # otlphttp/loki:
  #   endpoint: ${LOKI_ENDPOINT}

  debug/metrics:
    verbosity: detailed
  debug/traces:
    verbosity: detailed
  debug/logs:
    verbosity: detailed

  # otlp:
  #   endpoint: tempo:4317
  #   tls:
  #     insecure: true
  # prometheus:
  #   endpoint: "0.0.0.0:8889"

connectors:
  spanmetrics:
    dimensions:
    - name: http.method
    - name: http.status_code
    - name: http.route

service:
  pipelines:
    traces:
      receivers: [otlp]
      processors: [batch]
      exporters: [otlphttp/traces] #, debug/traces]
    # metrics/spanmetrics:
    #   receivers: [spanmetrics]
    #   exporters: [prometheus]
    metrics:
      receivers: [otlp, prometheus/collector]
      processors: [batch]
      exporters: [otlphttp/metrics] #, debug/metrics]
    logs:
      receivers: [otlp, tcplog/docker]
      processors: [batch, attributes]
      exporters: [otlphttp/logs] #, debug/logs]
